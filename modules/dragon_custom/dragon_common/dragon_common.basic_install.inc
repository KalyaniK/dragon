<?php
// $Id: dragon_common.basic_install.inc 3783 2015-03-11 06:51:44Z j5w $

/**
* @file
* Common used QAD Functions/Utilities for install file
*/


/**
 * Get module weight by module name.
 *
 * @param $module_name
 *   Module machine name
 *
 * @return The weight int value
 */
function dragon_common_get_module_weight($module_name){
  $result = db_select('system', 's')
    ->fields('s', array('weight'))
    ->condition('name', $module_name,'=')
    ->execute()
    ->fetchAssoc();
  $weight = $result['weight'];
  return intval($weight);
}

/**
 * Set module weight by module name.
 *
 * @param $module_name
 *   Module machine name
 * @param $weight
 *   The weight to set for this module
 */
function dragon_common_set_module_weight($module_name, $weight){
  db_update('system')
    ->fields(array('weight' => $weight))
    ->condition('name', $module_name, '=')
    ->execute();
}

/**
 * Set or delete variables, this function should be used for variables defined in their own module
 *
 * @param $variables
 *   Variables
 * @param $enable
 *   True to set variables, false to delete them
 */
function dragon_common_config_variables($variables, $enable){
  foreach ($variables as $key => $value) {
    $enable? variable_set($key, $value): variable_del($key);
  }
}

/**
 * Get a menu link item by the title
 *
 * @param $module_name
 *   Module machine name
 * @param $link_title
 *   The menu link name
 *
 * @return The menu link or FALSE
 */
function dragon_common_get_menu_link_by_title($menu_name, $link_title){
  $items = menu_load_links($menu_name);

  foreach ($items as $item) {
    if ($item['link_title'] === $link_title) {
      return $item;
    }
  }
  return FALSE;
}

/**
 * Add fields to certain table in DB,
 * fields info should already be added by hook_schema or hook_schema_alter
 *
 * @param $table
 *   The table to be altered.
 * @param $field_names
 *   An array of field names.
 */
function dragon_common_db_add_field($table, $field_names) {
  $schema = drupal_get_schema($table, TRUE);
  foreach ($field_names as $field_name) {
    if ( !db_field_exists($table, $field_name) && !empty($schema['fields'][$field_name])) {
      db_add_field($table, $field_name, $schema['fields'][$field_name]);
    }
  }
}

/**
 * Create/update Drupal fields and instance for certain content types
 *
 * @param $fields
 *   The field info array, can be generated by 'features' module.
 */
function dragon_common_save_fields($fields) {
  // Create each of the fields and their corresponding instances
  foreach ( $fields as $field_data ) {
    // Check if the fields already exists
    if(isset($field_data['field_config'])){
      $fld_config = $field_data['field_config'];
      if ( !field_info_field($fld_config['field_name']) ) {
      // Field doesn't exist, create the field
        field_create_field($fld_config);
      }
      else {
        field_update_field($fld_config);
      }
    }

    // Check for the field instance on the proper bundle
    $fld_instance = $field_data['field_instance'];
    if ( !field_info_instance($fld_instance['entity_type'], $fld_instance['field_name'], $fld_instance['bundle']) ) {
    // Create instance on the corresponding bundle
      field_create_instance($fld_instance);
    }
    else {
      field_update_instance($fld_instance);
    }
  }
}

/**
 * Delete Drupal field instances, the fields will also be delete if no instance exists in it.
 *
 * @param $fields
 *   The field info array, can be generated by 'features' module.
 */
function dragon_common_delete_field_instances($fields) {
  foreach ( $fields as $field_data ) {
    $fld_instance = $field_data['field_instance'];
    // Check for the field instance on the proper bundle
    if ( field_info_instance($fld_instance['entity_type'], $fld_instance['field_name'], $fld_instance['bundle']) ) {
      // Delete instance created by this module (will automatically delete the field if no more instances are left)
      field_delete_instance($fld_instance);
    }
  }
  field_purge_batch(1000);
}

/**
 * Create role
 *
 * @param $name
 *   The role name
 * @param $weight
 *   The role weight
 *
 * @return TRUE successfully added to db
 *         FALSE Already exist
 */
function dragon_common_create_role($name, $weight = NULL) {
  $roles = user_roles();
  if (!in_array($name, $roles)) {
    $new_role = new stdClass();
    $new_role->name = $name;
    if ($weight) {
      $new_role->weight = $weight;
    }
    $result = user_role_save($new_role);
    return $result > 0;
  }
  return FALSE;
}

/**
 * Grant a set of permissions to certain roles and site administrator
 *
 * @param $role_permissions
 *   The role permission array
 *   [role_name | role_id] => array(
 *     [permission_name]
 *     ...
 */
function dragon_common_grant_permissions_to_roles($role_permissions) {
  $all_permissions = array();
  foreach ($role_permissions as $role_info => $permissions) {
    $role = is_numeric($role_info)? user_role_load($role_info): user_role_load_by_name($role_info);
    if (!$role) {
      watchdog('dragon_common', 'Failed to grant permission to not existing role: %role_name ', array('%role_name' => $role->name), WATCHDOG_ERROR);
      return FALSE;
    }
    user_role_grant_permissions($role->rid, $permissions);
    $all_permissions = array_merge($all_permissions, $permissions);
  }

  // Grant all the permissions to the administrator role
  $admin_rid = variable_get('user_admin_role', NULL);

  if ($admin_rid) {
    user_role_grant_permissions($admin_rid, $all_permissions);
  }
  else {
    watchdog('dragon_common', 'Failed to load the administrator role thus cannot grant permissions to it', NULL, WATCHDOG_ERROR);
  }
}

/**
 * Add link items to a certain menu.
 * Note: if the the new links already exist, it'll be omitted instead of update. Therefore please delete those links and create them again.
 *
 * @param $menu_name
 *   The menu name
 * @param $new_links
 *   The links to add, the structure should follow the menu tree refered to
 *   https://api.drupal.org/api/drupal/includes%21menu.inc/function/menu_link_save/7
 * @param $parent_path
 *   The parent path of the new links
 * @param $parent_mlid
 *   The menu link id of the parent mlid
 * @param $exist_links
 *   The set of existing links, used for recursion
 */
function dragon_common_add_menu_links($menu_name, $new_links, $parent_path = NULL, $parent_mlid = NULL, $exist_links = array()) {
  if (!isset($parent_mlid) && empty($exist_links)) {
    if (menu_load($menu_name)) {
      menu_cache_clear($menu_name);
      $menu_links = menu_load_links($menu_name);
      foreach ($menu_links as $menu_link) {
        if ($menu_link['link_path'] == $parent_path) {
          $parent_mlid = $menu_link['mlid'];
        }
        $exist_links[$menu_link['link_path']] = $menu_link['mlid'];
      }
    } else {
      watchdog('dragon_common', 'Failed to load menu [@menu_name]', array('@menu_name' => $menu_name), WATCHDOG_ERROR);
      return;
    }
  }

  foreach ($new_links as $item) {
    if (!array_key_exists($item['link_path'], $exist_links)) {
      // Build new item
      if ($parent_mlid) {
        $item['plid'] = $parent_mlid;
      }
      $item['menu_name'] = $menu_name;

      $mlid = menu_link_save($item);
    } else {
      $mlid = $exist_links[$item['link_path']];
    }
    if (isset($item['children'])) {
      dragon_common_add_menu_links($menu_name, $item['children'], $item['link_path'], $mlid, $exist_links);
    }
  }
  menu_cache_clear($menu_name);
}

/**
 * Remove link items from a certain menu.
 *
 * @param $menu_name
 *   The menu name
 * @param $link_paths
 *   An array of paths of the links to remove
 * @param $link_path_contains
 *   A string that those removing links contains as a remove condition
 */
function dragon_common_remove_menu_links($menu_name, $link_paths, $link_path_contains = NULL) {
  if (!empty($link_paths)) {
    db_delete('menu_links')
      ->condition('link_path', $link_paths, 'IN')
      ->condition('menu_name', $menu_name)
      ->execute();
  }
  if (isset($link_path_contains)) {
    db_delete('menu_links')
      ->condition('link_path', '%' . db_like($link_path_contains) . '%', 'LIKE')
      ->condition('menu_name', $menu_name)
      ->execute();
  }
}
